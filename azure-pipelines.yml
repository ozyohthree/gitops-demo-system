# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- azure-pipelines

resources:
- repo: self

variables:
- group: MY_PROPERTIES
- name: NAMESPACE
  value: dev
- name: APP_NAME
  value: "gitops-demo-system"
- name: HELM_CHART
  value: "https://github.com/ozyohthree/gitops-demo-deploy-config/releases/download/deploy-0.1.2/deploy-0.1.2.tgz"
- name: GIT_COMMIT
  value: $(Build.SourceVersion)
- name: GIT_BRANCH
  value: $(Build.SourceBranchName)
- name: GIT_PATH
  value: 'github.com/ozyohthree/gitops-demo-cicd-config.git'
- name: TAG_VERSION
  value: $(GIT_COMMIT)
- name: IMAGE_TAG
  value: "$(QUAY_NAME)/$(QUAY_USER)/$(APP_NAME):$(TAG_VERSION)"

stages:
  - stage: BuildAndPushDockerImage
    displayName: 'Build image and push to quay.io'
    jobs:
    - job: BuildAndPush
      displayName: Docker-Build
      pool:
        vmImage: ubuntu-latest
      steps:
      # - task: Docker@0
      #   name: build_docker_image
      #   displayName: 'Build Application Docker Image'
      #   inputs:
      #     containerregistrytype: 'Container Registry'
      #     action: 'Build an image'
      #     dockerFile: '**/Dockerfile.build'
      #     imageName: '$(IMAGE_TAG)' 
      #     #'$(Build.Repository.Name):$(Build.BuildId)'
        
      # - task: Bash@3
      #   name: push_image_to_registry
      #   displayName: 'Push image to Quay registry'
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       # Write your commands here
      #       # echo "TAG_VERSION: $(GIT_COMMIT)"
      #       # echo "##vso[task.setvariable variable=FULL_IMAGE_TAG;]release-$(GIT_COMMIT)"
      #       echo "$(IMAGE_TAG)"
      #       docker images
      #       # docker login -u="$(QUAY_USER)" -p="$(QUAY_PASS)" $(QUAY_NAME)
      #       # docker push $(IMAGE_TAG)
          
      - task: Bash@3
        name: update_dev_config
        inputs:
          targetType: 'inline'
          script: |
            curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
            #wget https://github.com/github/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz
            #tar -xvf ./hub-linux-amd64-2.14.2.tgz
            bin/hub version
            NEW_URL=$(echo https://$GIT_USERNAME:$GIT_TOKEN@$GIT_PATH|tr -d ' \n')
            echo "GIT NEW URL: $NEW_URL"
            git remote set-url origin $NEW_URL
            git config --global user.email "$GIT_USERNAME@gmail.com"
            git config --global user.name "$GIT_USERNAME"
            git config credential.helper 'cache --timeout=30'
            # mkdir ~/.config
            cat > ~/.config/hub << EOF3
            github.com:
            - user: $GIT_USERNAME
              oauth_token: $GIT_TOKEN
              protocol: https
            EOF3
            cat ~/.config
            mkdir values
            cd values
            git remote -v
            git fetch
            ls -al
            # git switch ocp-dev-config
            sed -i "s/tag:.*/tag: $TAG_VERSION/" ./system-app-values/values.yaml
            sed -i "s/tag:.*/tag: $TAG_VERSION/" ./system-app-values/values-pt.yaml
            echo "----values.yaml----"
            cat system-app-values/values.yaml
            echo "-------------------"
            echo "----values-pt.yaml----"
            cat system-app-values/values-pt.yaml
            echo "-------------------"
            git branch -m "$TAG_VERSION"
            git add .
            git commit -m "Build Update: $TAG_VERSION"
            echo Pushing to origin "$TAG_VERSION"
            git push origin "$TAG_VERSION"
            echo "Creating Pull Request"
            HUB_RESULT=$(bin/hub pull-request -m "$TAG_VERSION" -b main)
            echo "Hub Result is $HUB_RESULT"

  

           