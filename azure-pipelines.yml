# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- azure-pipelines

resources:
- repo: self

variables:
- group: MY_PROPERTIES
- name: NAMESPACE
  value: dev
- name: APP_NAME
  value: "gitops-demo-system"
- name: GIT_COMMIT
  value: $(Build.SourceVersion)
- name: GIT_BRANCH
  value: $(Build.SourceBranchName)
- name: GIT_PATH
  value: github.com/ozyohthree/gitops-demo-deploy-config.git
- name: TAG_VERSION
  value: release-$(GIT_COMMIT)
- name: IMAGE_TAG
  value: "$(QUAY_NAME)/$(QUAY_USER)/$(APP_NAME):$(TAG_VERSION)"
- name: RELEASE_BRANCH
  value: release/1.0

stages:
  - stage: BuildAndPushDockerImage
    displayName: 'Build image and push to quay.io'
    jobs:
    - job: BuildAndPush
      displayName: Docker-Build
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: Docker@0
        name: build_docker_image
        displayName: 'Build Application Docker Image'
        inputs:
          containerregistrytype: 'Container Registry'
          action: 'Build an image'
          dockerFile: '**/Dockerfile.build'
          imageName: '$(IMAGE_TAG)' 
          #'$(Build.Repository.Name):$(Build.BuildId)'
        
      - task: Bash@3
        name: push_image_to_registry
        displayName: 'Push image to Quay registry'
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
            # echo "TAG_VERSION: $(GIT_COMMIT)"
            # echo "##vso[task.setvariable variable=FULL_IMAGE_TAG;]release-$(GIT_COMMIT)"
            echo "$(IMAGE_TAG)"
            docker images --digests
            # docker login -u="$(QUAY_USER)" -p="$(QUAY_PASS)" $(QUAY_NAME)
            # docker push $(IMAGE_TAG)
            
      - task: Bash@3
        name: update_values_file_local
        displayName: 'Push image to Quay registry'
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
            ls -al


      # - task: Bash@3
      #   name: update_deploy_configs
      #   displayName: 'Update the Deployment configs with Image Tag'
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       cd ..
      #       pwd         
      #       git clone https://$GIT_PATH
      #       cd gitops-demo-deploy-config
      #       curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
      #       bin/hub version
      #       git config --global user.email "$GIT_USERNAME@gmail.com"
      #       git config --global user.name "$GIT_USERNAME"
      #       git config credential.helper 'cache --timeout=30'
      #       cat > ~/.config/hub << EOF3
      #       github.com:
      #       - user: $GIT_USERNAME
      #         oauth_token: $GIT_TOKEN
      #         protocol: https
      #       EOF3
      #       cat ~/.config/hub
      #       NEW_URL=$(echo https://$GIT_USERNAME:$GIT_TOKEN@$GIT_PATH|tr -d ' \n')
      #       echo "GIT NEW URL: $NEW_URL"
      #       git remote set-url origin $NEW_URL 
      #       git remote -v
      #       ls -al
      #       git switch $RELEASE_BRANCH
      #       sed -i "s/tag:.*/tag: $TAG_VERSION/" ./system-app-values/values.yaml
      #       sed -i "s/tag:.*/tag: $TAG_VERSION/" ./system-app-values/values-uat.yaml
      #       echo "----values.yaml----"
      #       cat system-app-values/values.yaml
      #       echo "-------------------"
      #       echo "----values-pt.yaml----"
      #       cat system-app-values/values-uat.yaml
      #       echo "-------------------"
      #       git pull
      #       git add .
      #       git commit -m "Build Update: $TAG_VERSION"
      #       echo "Pushing to origin $RELEASE_BRANCH"
      #       git push origin "$RELEASE_BRANCH"


      # - task: Bash@3
      #   name: update_dev_config_with_pr
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       cd ..
      #       pwd         
      #       git clone https://$GIT_PATH
      #       cd gitops-demo-deploy-config
      #       curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
      #       bin/hub version
      #       git config --global user.email "$GIT_USERNAME@gmail.com"
      #       git config --global user.name "$GIT_USERNAME"
      #       git config credential.helper 'cache --timeout=30'
      #       cat > ~/.config/hub << EOF3
      #       github.com:
      #       - user: $GIT_USERNAME
      #         oauth_token: $GIT_TOKEN
      #         protocol: https
      #       EOF3
      #       cat ~/.config/hub
      #       NEW_URL=$(echo https://$GIT_USERNAME:$GIT_TOKEN@$GIT_PATH|tr -d ' \n')
      #       echo "GIT NEW URL: $NEW_URL"
      #       git remote set-url origin $NEW_URL 
      #       git remote -v
      #       ls -al
      #       git switch $RELEASE_BRANCH
      #       sed -i "s/tag:.*/tag: $TAG_VERSION/" ./system-app-values/values.yaml
      #       sed -i "s/tag:.*/tag: $TAG_VERSION/" ./system-app-values/values-uat.yaml
      #       echo "----values.yaml----"
      #       cat system-app-values/values.yaml
      #       echo "-------------------"
      #       echo "----values-pt.yaml----"
      #       cat system-app-values/values-uat.yaml
      #       echo "-------------------"
      #       git branch -m "$TAG_VERSION"
      #       git pull
      #       git add .
      #       git commit -m "Build Update: $TAG_VERSION"
      #       echo Pushing to origin "$TAG_VERSION"
      #       git push origin "$TAG_VERSION"
      #       echo "Creating Pull Request"
      #       HUB_RESULT=$(bin/hub pull-request -m "$TAG_VERSION" -b $RELEASE_BRANCH)
      #       echo "Hub Result is $HUB_RESULT"

  

           